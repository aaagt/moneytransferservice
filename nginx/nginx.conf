worker_processes  1;


events {
    worker_connections  1024;
}


http {
    # mime.types задаёт все доступные типы данных,
    # которые обычно приходят в заголовке Content-Type.
    include       mime.types;

    # Формат логгирования
    log_format json '{ "time": "$time_local", '
                   '"remote_ip": "$remote_addr", '
                   '"remote_user": "$remote_user", '
                   '"request": "$request", '
                   '"response": "$status", '
                   '"bytes": "$body_bytes_sent", '
                   '"referrer": "$http_referer", '
                   '"agent": "$http_user_agent", '
                   '"request_id": "$request_id"}';

    access_log /var/log/nginx/access-log.json json;

    # Не показывать версию Nginx
    server_tokens   off;

    # убирает дополнительное копирование при передаче файлов
    # статики или пользовательского контента и избавляет от
    # вызова методов формата read+write
    sendfile        on;

    tcp_nodelay     on;
    tcp_nopush      on;

    # Для загрузки контента на сервер
    client_max_body_size 8m;

    gzip on;
    gzip_min_length 1000;
    gzip_types
        text/plain
        text/css
        application/json
        application/x-javascript
        text/xml
        text/javascript;

    proxy_redirect     off;
    proxy_set_header   Host             $host;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    proxy_set_header   X-Request-Id     $request_id;

    # set_real_ip_from  192.168.1.0/24;
    # real_ip_header    X-Forwarded-For;
    limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;

    upstream backend {
        server backend1:8080;
#         server backend2:8080;
    }

    upstream frontend {
        server frontend1:3000;
    }

    server {
         server_tokens off;
         listen       8000 default_server;
         listen       [::]:8000 default_server;
         server_name  _;

         location /card-transfer {
             proxy_pass http://frontend;
         }

         #location ~^/card-transfer/ {
         #    proxy_pass http://backend;
         #}

         #
         # Wide-open CORS config for nginx
         #
         location / {
             limit_req zone=one burst=30;
             if ($request_method = 'OPTIONS') {
                 add_header 'Access-Control-Allow-Origin' '*';
                 add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                 #
                 # Custom headers and headers various browsers *should* be OK with but aren't
                 #
                 add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                 #
                 # Tell client that this pre-flight info is valid for 20 days
                 #
                 add_header 'Access-Control-Max-Age' 1728000;
                 add_header 'Content-Type' 'text/plain; charset=utf-8';
                 add_header 'Content-Length' 0;
                 return 204;
             }
             if ($request_method = 'POST') {
                 add_header 'Access-Control-Allow-Origin' '*' always;
                 add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                 add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                 add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
             }
             if ($request_method = 'GET') {
                 add_header 'Access-Control-Allow-Origin' '*' always;
                 add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                 add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                 add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
             }
             return 404;
         }

         location /transfer {
             proxy_pass http://backend;
             proxy_set_header X-Request-Id $request_id;
         }

         location /confirmOperation {
             proxy_pass http://backend;
             proxy_set_header X-Request-Id $request_id;
         }
    }
}
